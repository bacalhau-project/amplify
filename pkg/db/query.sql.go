// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createQueueItem = `-- name: CreateQueueItem :exec
INSERT INTO queue_item (id, inputs, created_at)
VALUES ($1, $2, $3)
`

type CreateQueueItemParams struct {
	ID        uuid.UUID
	Inputs    []string
	CreatedAt time.Time
}

func (q *Queries) CreateQueueItem(ctx context.Context, arg CreateQueueItemParams) error {
	_, err := q.db.ExecContext(ctx, createQueueItem, arg.ID, pq.Array(arg.Inputs), arg.CreatedAt)
	return err
}

const getQueueItemDetail = `-- name: GetQueueItemDetail :one
SELECT id, inputs, created_at
FROM queue_item
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQueueItemDetail(ctx context.Context, id uuid.UUID) (QueueItem, error) {
	row := q.db.QueryRowContext(ctx, getQueueItemDetail, id)
	var i QueueItem
	err := row.Scan(&i.ID, pq.Array(&i.Inputs), &i.CreatedAt)
	return i, err
}

const listQueueItems = `-- name: ListQueueItems :many
SELECT id, inputs, created_at 
FROM queue_item
`

func (q *Queries) ListQueueItems(ctx context.Context) ([]QueueItem, error) {
	rows, err := q.db.QueryContext(ctx, listQueueItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueueItem
	for rows.Next() {
		var i QueueItem
		if err := rows.Scan(&i.ID, pq.Array(&i.Inputs), &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
