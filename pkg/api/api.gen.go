// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Error defines model for error.
type Error struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// Errors defines model for errors.
type Errors = []Error

// ExecutionRequest defines model for executionRequest.
type ExecutionRequest struct {
	Cid string `json:"cid"`
}

// Home defines model for home.
type Home struct {
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Item defines model for item.
type Item struct {
	Id       *string           `json:"id,omitempty"`
	Links    *Links            `json:"links,omitempty"`
	Metadata *ItemMetadata     `json:"metadata,omitempty"`
	Request  *ExecutionRequest `json:"request,omitempty"`
	Type     *string           `json:"type,omitempty"`
}

// ItemMetadata defines model for itemMetadata.
type ItemMetadata struct {
	Ended     *string `json:"ended,omitempty"`
	Started   *string `json:"started,omitempty"`
	Submitted string  `json:"submitted"`
}

// Job defines model for job.
type Job struct {
	Id    *string `json:"id,omitempty"`
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Jobs defines model for jobs.
type Jobs struct {
	Data  *[]Job `json:"data,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// Links defines model for links.
type Links = map[string]interface{}

// Queue defines model for queue.
type Queue struct {
	Data  *[]Item `json:"data,omitempty"`
	Links *Links  `json:"links,omitempty"`
}

// Workflow defines model for workflow.
type Workflow struct {
	Id    *string `json:"id,omitempty"`
	Jobs  *[]Job  `json:"jobs,omitempty"`
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// WorkflowExecutionRequest defines model for workflowExecutionRequest.
type WorkflowExecutionRequest struct {
	Cid  string `json:"cid"`
	Name string `json:"name"`
}

// Workflows defines model for workflows.
type Workflows struct {
	Data  *[]Workflow `json:"data,omitempty"`
	Links *Links      `json:"links,omitempty"`
}

// PutV0QueueWorkflowIdJSONRequestBody defines body for PutV0QueueWorkflowId for application/json ContentType.
type PutV0QueueWorkflowIdJSONRequestBody = WorkflowExecutionRequest

// PutV0QueueIdJSONRequestBody defines body for PutV0QueueId for application/json ContentType.
type PutV0QueueIdJSONRequestBody = ExecutionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Amplify home
	// (GET /v0)
	GetV0(w http.ResponseWriter, r *http.Request)
	// List all Amplify jobs
	// (GET /v0/jobs)
	GetV0Jobs(w http.ResponseWriter, r *http.Request)
	// Get a job by id
	// (GET /v0/jobs/{id})
	GetV0JobsId(w http.ResponseWriter, r *http.Request, id string)
	// Amplify work queue
	// (GET /v0/queue)
	GetV0Queue(w http.ResponseWriter, r *http.Request)
	// Enqueue a task for a specific workflow
	// (PUT /v0/queue/workflow/{id})
	PutV0QueueWorkflowId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get an item from the queue by id
	// (GET /v0/queue/{id})
	GetV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Run all workflows for a CID
	// (PUT /v0/queue/{id})
	PutV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List all Amplify workflows
	// (GET /v0/workflows)
	GetV0Workflows(w http.ResponseWriter, r *http.Request)
	// Get a workflow by id
	// (GET /v0/workflows/{id})
	GetV0WorkflowsId(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetV0 operation middleware
func (siw *ServerInterfaceWrapper) GetV0(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Jobs operation middleware
func (siw *ServerInterfaceWrapper) GetV0Jobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Jobs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0JobsId operation middleware
func (siw *ServerInterfaceWrapper) GetV0JobsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0JobsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Queue operation middleware
func (siw *ServerInterfaceWrapper) GetV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Queue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutV0QueueWorkflowId operation middleware
func (siw *ServerInterfaceWrapper) PutV0QueueWorkflowId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV0QueueWorkflowId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) GetV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) PutV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Workflows operation middleware
func (siw *ServerInterfaceWrapper) GetV0Workflows(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Workflows(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0WorkflowsId operation middleware
func (siw *ServerInterfaceWrapper) GetV0WorkflowsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0WorkflowsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/v0", wrapper.GetV0).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs", wrapper.GetV0Jobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs/{id}", wrapper.GetV0JobsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue", wrapper.GetV0Queue).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue/workflow/{id}", wrapper.PutV0QueueWorkflowId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.GetV0QueueId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.PutV0QueueId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/v0/workflows", wrapper.GetV0Workflows).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/workflows/{id}", wrapper.GetV0WorkflowsId).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY23LbNhD9FQzat0oiLVtRrLc0yaROkzhN02amiR9AcCnBBgEYF8eMR//eAXiRSNGW",
	"Xccee5onUSQX2D3nYC+8wFTmSgoQ1uDZBTZ0ATkJl6C11P5CaalAWwbhdgqWMF5eGaqZskwKPMPP0MLl",
	"RAw1kJQkHBCcK04E8Y+RUUBZxiiyEtkFM0hS6rQGQQHJDNkFIKVlwiEf4QGGc5IrDniGn0vHUySkRRkT",
	"KSJIQwalmZWIoGOZIEo4hxR9wTlYkhJLvmA8wLZQfgFjNRNzvBxgy6xfctNts5DaDrreG5fnRBcd75Bd",
	"EIv+/O3wrzcv0LvDj4guiJgDyrTM12Oy8vIIBwjOKSiLMqmRclpJA8a/wyUlnH0LiLVheC2TEgTpRLoZ",
	"3LK5I5NjoNaHG9gLhDELebj4WUOGZ/inaEV5VPEdlWSvFiJakyKscw7UeY8+wKkDYzcFQVka5NJ4m5Cs",
	"SIDN00J/sxOTqalL8+nCTZ+4xbQYPxHZLmSu4KckyXYl5XN7WkwmWfItZb2xaTh1TEOKZ5/DZkc94S5k",
	"DpuucSZOtoZevtSEvh5JWPVacHuQN/fvIjPdi8nk6XR/uDfep8M9QsbD/afxdAjJOI6THQLTyV6fdm8W",
	"R30Othl4n9/W71Y4VwxfKZWuInqhC4BcG7q3ay63IQSRQgfFcbyzP9yJhzvjj/F0No5nk3g0Gf/TB5yx",
	"RNvb2LskZ/a/r9BR72q5Pg0fy2S7hBpyby2TTc68A9ei7FgmpqcyVAReK+H4vXrSzU1C6POssW+iusAG",
	"uF8qUsQuIiuj8L/P+NSBg1vGFXR/B4F9lfok4/LrdoWkkBHHbZ9Aat7ui6E+kTWBXEtp9dsve8oQ4fww",
	"w7PPN05XXQQFyTtO5sXwSj/XD3Ww3jzPR2ve3/awNL58d2H5W0xksqcxyhVnWYGUSzij6Nn7A9w0UfVD",
	"PMBnoE1pEI/i0Y73SCoQRDE8w7ujeLSLB9ifvOBjdBb7nzkEAj0eods5SPEMvwL7d4w9tkZJYUqYxnEw",
	"oFJYECXrSnFGg1l0JtIRUeyXY+M9qLvXbWCEqh6wgHMbLWzO27YrGXxxcbxL/RvhCsr/iUyL8v+vMi2Q",
	"X6V8EK2eVDdWpj0yWg46kB/+HtyqWs81DhqPo7M4qg9xBWKHNYFIZeR7Y2YQQYaJue9oLSjEBCKoltMI",
	"ffS9OIhUSSYs4sxYgwjn3tb4FrSHodd++3tgKYT5IFk6GXVoesOMDbA9W0FvWnxFFyxdXq18j+tBGg6L",
	"JjlY8N375y6/70jezBOeYCuRX9IfYjwL5wwPqnzmC8N6prLawWANwG6gR/dD6sPldID34r3vHnI1iD3E",
	"qNtjZVvTr8BW83VSIJY2am56pN7086bJIE3pQ0Sk4UD43ONlW67Qm1v+qB7duQ5LHx5HdqmTikcUrRxv",
	"yGi6gybJKNdDzXtOKJi17I8sMSdIlqTUm/ST897V5HyqjPsy1c1TUCZ1TiyeYedY33eNo2Yo9ShfoYKb",
	"sX9pU7ls93be3eWGGsc9VZdSUBbSKonE/6ck8tK7hqrJlok5qhjryvilCNpCpNRdJrVvTervgqsOtyXt",
	"7WUzqPIe1XjHiakcHx9FXgoVQiDvcfn9s0nudckY9GeiSgkmfM4NWvFtjHaiUzi8RPyac3YGAj0/eHFF",
	"XnrU+Qh+5KH7y0MfenVGgr7q5NOa2y+bs9brcqinVAoB1JrWGHD5jNVscsmg9alx4h7yziriRzpytQNo",
	"kXiNKtJgfbMJbNVKPa4xrFVtf8xiDyHqWoFbBrJGcfVU5t8BfVZr1WmOZzgiiuHl0fLfAAAA//+SBXHv",
	"3h0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
