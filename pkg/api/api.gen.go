// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Error defines model for error.
type Error struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// Errors defines model for errors.
type Errors = []Error

// ExecutionRequest defines model for executionRequest.
type ExecutionRequest struct {
	Cid  *string `json:"cid,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Home defines model for home.
type Home struct {
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Item defines model for item.
type Item struct {
	Cid       *string `json:"cid,omitempty"`
	Ended     *string `json:"ended,omitempty"`
	Id        *string `json:"id,omitempty"`
	Kind      *string `json:"kind,omitempty"`
	Links     *Links  `json:"links,omitempty"`
	Name      *string `json:"name,omitempty"`
	Started   *string `json:"started,omitempty"`
	Submitted *string `json:"submitted,omitempty"`
	Type      *string `json:"type,omitempty"`
}

// Job defines model for job.
type Job struct {
	Id    *string `json:"id,omitempty"`
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Jobs defines model for jobs.
type Jobs struct {
	Data  *[]Job `json:"data,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// Links defines model for links.
type Links = map[string]interface{}

// Queue defines model for queue.
type Queue struct {
	Data  *[]Item `json:"data,omitempty"`
	Links *Links  `json:"links,omitempty"`
}

// Workflow defines model for workflow.
type Workflow struct {
	Id    *string `json:"id,omitempty"`
	Jobs  *[]Job  `json:"jobs,omitempty"`
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Workflows defines model for workflows.
type Workflows struct {
	Data  *[]Workflow `json:"data,omitempty"`
	Links *Links      `json:"links,omitempty"`
}

// PutV0QueueWorkflowIdJSONRequestBody defines body for PutV0QueueWorkflowId for application/json ContentType.
type PutV0QueueWorkflowIdJSONRequestBody = ExecutionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Amplify home
	// (GET /v0)
	GetV0(w http.ResponseWriter, r *http.Request)
	// List all Amplify jobs
	// (GET /v0/jobs)
	GetV0Jobs(w http.ResponseWriter, r *http.Request)
	// Get a job by id
	// (GET /v0/jobs/{id})
	GetV0JobsId(w http.ResponseWriter, r *http.Request, id string)
	// Amplify work queue
	// (GET /v0/queue)
	GetV0Queue(w http.ResponseWriter, r *http.Request)
	// Enqueue a task
	// (PUT /v0/queue/workflow/{id})
	PutV0QueueWorkflowId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get an item from the queue by id
	// (GET /v0/queue/{id})
	GetV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// List all Amplify workflows
	// (GET /v0/workflows)
	GetV0Workflows(w http.ResponseWriter, r *http.Request)
	// Get a workflow by id
	// (GET /v0/workflows/{id})
	GetV0WorkflowsId(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetV0 operation middleware
func (siw *ServerInterfaceWrapper) GetV0(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Jobs operation middleware
func (siw *ServerInterfaceWrapper) GetV0Jobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Jobs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0JobsId operation middleware
func (siw *ServerInterfaceWrapper) GetV0JobsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0JobsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Queue operation middleware
func (siw *ServerInterfaceWrapper) GetV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Queue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutV0QueueWorkflowId operation middleware
func (siw *ServerInterfaceWrapper) PutV0QueueWorkflowId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV0QueueWorkflowId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) GetV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Workflows operation middleware
func (siw *ServerInterfaceWrapper) GetV0Workflows(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Workflows(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0WorkflowsId operation middleware
func (siw *ServerInterfaceWrapper) GetV0WorkflowsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0WorkflowsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/v0", wrapper.GetV0).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs", wrapper.GetV0Jobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs/{id}", wrapper.GetV0JobsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue", wrapper.GetV0Queue).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue/workflow/{id}", wrapper.PutV0QueueWorkflowId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.GetV0QueueId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/workflows", wrapper.GetV0Workflows).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/workflows/{id}", wrapper.GetV0WorkflowsId).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+Vwhub7MtxYnrxm/dVnTtirbbuhXY2geKOtlMKJIhj2nUwP/7QOqHY0Vp",
	"EqQxEmxPlkXe8e6+j8ePOqdcl0YrUOjo4pw6voKSxUewVtvwYKw2YFFAfJ0DMiHrJ8etMCi0ogv6jKx8",
	"ydTYAstZJoHAmZFMsTBMnAEuCsEJaoIr4Yjm3FsLigPRBcEVEGN1JqGc0BGFM1YaCXRBf9Je5kRpJIVQ",
	"OWHEQgG1GWrCyJHOCGdSQk4+0hKQ5QzZR0pHFCsTHDi0Qi3pekRRYHB5OWy30hZH/eidL0tmq150BFcM",
	"yR+/vP3z9c/kzdv3hK+YWgIprC4v5oT66gxHBM44GCSFtsR4a7QDF+ZIzZkUX2LFtsvwSmd1EbRX+eXk",
	"1t0bnR0Bx5BuRC8CJhDK+PC9hYIu6HfJBvKkwTupwd44YtayKvo5A+5DRL/DiQeHlwnBRR7p0kWbsaLK",
	"QCzzyn7BmSvM3OflfOXnT/xqXk2fqGIfCl/JE5YV+5rLJZ5Us1mRfcnFEHCKlbC9QFmNP2t7XEj9+WbF",
	"WOnaxXbgUqjjawtTT+qcXgwjer3R+gGC3RcOVA69Fabp3uF4Lx3vTd+n88U0XczSyWz695B1P7j5Qcpm",
	"T+eH44PpIR8fMDYdHz5N52PIpmma7TGYzw6G/BwL1fN0NXajW2IyQI2mBwz5dsgs3qEizmelwLt4uMyh",
	"yIwbcehIZ5cp1Afpa+nfle4hgJtG6gbOjRDWTdtRWGugGd0mhaHIOvsuq3PqQAZXiWG4SlAn8f+Q8YkH",
	"D3fMK8J9D4l1W+pahuRQMC9xiCAtbrtCaIhkt+vr7ey70q1b9ZtDE14JVegB4VEaKYqKGJ9Jwcmzdy9p",
	"J1LaQTqip2BdbZBO0sleiEgbUMwIuqD7k3SS0hEN3I0xJqdp+FlCPKdDPaKaeJnTBX0B+FeYbMEZrVxd",
	"pmkaDbhWCCoaMWOk4NEsOVX5hBnxw5ELEbTq8LpixHMx1gLOMFlhKbdtN2h/9Gm6z8OM+AT1/0znVf3/",
	"R51XJHipB5LNSPNiYzpAmPWoV/K3v8awGml3AYMu4uQ0Tdpt0BSxh5oirDEK2lM4wogTahkUI4IhQhFG",
	"WjpNyPugdUHlRguFRAqHjjApg60LEm8AoVdh+R2gFNN8kCgdT3owvRYOY9mebUrvtvBKzkW+/jrzQ11f",
	"5nGzWFYCQlDH//TxfcPKTq8HgFGT4DJsYrqI+4y2siO01oDTiRc2aAK0HkYXCthP9NNuQH24mI7oQXrw",
	"zVNuLjoPMevta9s2p18ANvfXrCIi79jcqYzB9vO66yDd0UeYyuOGCL0n0Lb2MNhbfmuG7p2HdQyPo7u0",
	"TSVUlGwC78Do1EHXZIwfgOadZBzCcYDMHRNdY9H6HsbknW8x+dAsMdSgbt95Cm1LhnRBvRdDnws+1cbg",
	"MBT3K+Dfcif2PxXE8m+Hub5EvunAIcs5GIS86Rnpf6lnPA+hkeaqKdSSNEj1WftcRU41fOsx9vrTMLJu",
	"h2y7535T36seRbuJjV+REHH92bDr2b2TYOtyc5UYvdi8wmTCtVLA0W1ppauFaLfIFWr0QxfEDlDcZPxI",
	"del2Alsg3mBPdrW+nUztoH9kWnVz6f5fsD6QrFsGXqNaO8a1DSvMAXvactVbSRc0YUbQ9af1vwEAAP//",
	"VIDX0WMaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
