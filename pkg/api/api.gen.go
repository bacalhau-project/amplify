// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Error defines model for error.
type Error struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// Errors defines model for errors.
type Errors = []Error

// ExecutionInfo defines model for executionInfo.
type ExecutionInfo struct {
	// Id External execution ID
	Id *string `json:"id,omitempty"`

	// Status External status of the job
	Status *string `json:"status,omitempty"`
	Stderr *string `json:"stderr,omitempty"`
	Stdout *string `json:"stdout,omitempty"`
}

// ExecutionRequest defines model for executionRequest.
type ExecutionRequest struct {
	Cid string `json:"cid"`
}

// Graph defines model for graph.
type Graph struct {
	Data  *[]NodeConfig `json:"data,omitempty"`
	Links *Links        `json:"links,omitempty"`
}

// Home defines model for home.
type Home struct {
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Item defines model for item.
type Item struct {
	Id       string       `json:"id"`
	Links    *Links       `json:"links,omitempty"`
	Metadata ItemMetadata `json:"metadata"`
	Type     string       `json:"type"`
}

// ItemMetadata defines model for itemMetadata.
type ItemMetadata struct {
	Ended     *string `json:"ended,omitempty"`
	Started   *string `json:"started,omitempty"`
	Submitted string  `json:"submitted"`
}

// Job defines model for job.
type Job struct {
	Entrypoint *[]string `json:"entrypoint,omitempty"`
	Id         string    `json:"id"`
	Image      string    `json:"image"`
	Links      *Links    `json:"links,omitempty"`
	Type       string    `json:"type"`
}

// Jobs defines model for jobs.
type Jobs struct {
	Data  *[]Job `json:"data,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// Links defines model for links.
type Links = map[string]interface{}

// Node defines model for node.
type Node struct {
	Children  *[]Node            `json:"children,omitempty"`
	Execution *ExecutionInfo     `json:"execution,omitempty"`
	Id        openapi_types.UUID `json:"id"`
	Inputs    []ExecutionRequest `json:"inputs"`
	Links     *Links             `json:"links,omitempty"`
	Metadata  ItemMetadata       `json:"metadata"`
	Outputs   []ExecutionRequest `json:"outputs"`
	Type      string             `json:"type"`
}

// NodeConfig Static configuration of a node.
type NodeConfig struct {
	Id      *string       `json:"id,omitempty"`
	Inputs  *[]NodeInput  `json:"inputs,omitempty"`
	JobId   *string       `json:"job_id,omitempty"`
	Outputs *[]NodeOutput `json:"outputs,omitempty"`
}

// NodeInput Input specification for a node.
type NodeInput struct {
	OutputId *string `json:"output_id,omitempty"`
	Path     *string `json:"path,omitempty"`
	Root     *bool   `json:"root,omitempty"`
	StepId   *string `json:"step_id,omitempty"`
}

// NodeOutput Output specification for a node.
type NodeOutput struct {
	Id   *string `json:"id,omitempty"`
	Path *string `json:"path,omitempty"`
}

// Queue defines model for queue.
type Queue struct {
	Data  *[]Item `json:"data,omitempty"`
	Links *Links  `json:"links,omitempty"`
}

// PutV0QueueIdJSONRequestBody defines body for PutV0QueueId for application/json ContentType.
type PutV0QueueIdJSONRequestBody = ExecutionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Amplify home
	// (GET /v0)
	GetV0(w http.ResponseWriter, r *http.Request)
	// Get Amplify work graph
	// (GET /v0/graph)
	GetV0Graph(w http.ResponseWriter, r *http.Request)
	// List all Amplify jobs
	// (GET /v0/jobs)
	GetV0Jobs(w http.ResponseWriter, r *http.Request)
	// Get a job by id
	// (GET /v0/jobs/{id})
	GetV0JobsId(w http.ResponseWriter, r *http.Request, id string)
	// Amplify work queue
	// (GET /v0/queue)
	GetV0Queue(w http.ResponseWriter, r *http.Request)
	// Get an item from the queue by id
	// (GET /v0/queue/{id})
	GetV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Run all workflows for a CID
	// (PUT /v0/queue/{id})
	PutV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetV0 operation middleware
func (siw *ServerInterfaceWrapper) GetV0(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Graph operation middleware
func (siw *ServerInterfaceWrapper) GetV0Graph(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Graph(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Jobs operation middleware
func (siw *ServerInterfaceWrapper) GetV0Jobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Jobs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0JobsId operation middleware
func (siw *ServerInterfaceWrapper) GetV0JobsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0JobsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Queue operation middleware
func (siw *ServerInterfaceWrapper) GetV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Queue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) GetV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) PutV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/v0", wrapper.GetV0).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/graph", wrapper.GetV0Graph).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs", wrapper.GetV0Jobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs/{id}", wrapper.GetV0JobsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue", wrapper.GetV0Queue).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.GetV0QueueId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.PutV0QueueId).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
