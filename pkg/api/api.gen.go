// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Error defines model for error.
type Error struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// Errors defines model for errors.
type Errors = []Error

// ExecutionRequest defines model for executionRequest.
type ExecutionRequest struct {
	Cid string `json:"cid"`
}

// Graph defines model for graph.
type Graph struct {
	Data  *[]NodeConfig `json:"data,omitempty"`
	Links *Links        `json:"links,omitempty"`
}

// Home defines model for home.
type Home struct {
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Item defines model for item.
type Item struct {
	Id       string       `json:"id"`
	Links    *Links       `json:"links,omitempty"`
	Metadata ItemMetadata `json:"metadata"`
	Type     string       `json:"type"`
}

// ItemMetadata defines model for itemMetadata.
type ItemMetadata struct {
	Ended     *string `json:"ended,omitempty"`
	Started   *string `json:"started,omitempty"`
	Status    string  `json:"status"`
	Submitted string  `json:"submitted"`
}

// Job defines model for job.
type Job struct {
	Entrypoint *[]string `json:"entrypoint,omitempty"`
	Id         string    `json:"id"`
	Image      string    `json:"image"`
	Links      *Links    `json:"links,omitempty"`
	Type       string    `json:"type"`
}

// Jobs defines model for jobs.
type Jobs struct {
	Data  *[]Job `json:"data,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// Links defines model for links.
type Links = map[string]interface{}

// Node defines model for node.
type Node struct {
	Children *[]Node            `json:"children,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Inputs   []ExecutionRequest `json:"inputs"`
	Links    *Links             `json:"links,omitempty"`
	Metadata ItemMetadata       `json:"metadata"`
	Outputs  []ExecutionRequest `json:"outputs"`
	Status   *Status            `json:"status,omitempty"`
	Type     string             `json:"type"`
}

// NodeConfig Static configuration of a node.
type NodeConfig struct {
	Id      *string       `json:"id,omitempty"`
	Inputs  *[]NodeInput  `json:"inputs,omitempty"`
	JobId   *string       `json:"job_id,omitempty"`
	Outputs *[]NodeOutput `json:"outputs,omitempty"`
}

// NodeInput Input specification for a node.
type NodeInput struct {
	OutputId  *string `json:"output_id,omitempty"`
	Path      *string `json:"path,omitempty"`
	Predicate *string `json:"predicate,omitempty"`
	Root      *bool   `json:"root,omitempty"`
	StepId    *string `json:"step_id,omitempty"`
}

// NodeOutput Output specification for a node.
type NodeOutput struct {
	Id   *string `json:"id,omitempty"`
	Path *string `json:"path,omitempty"`
}

// Queue defines model for queue.
type Queue struct {
	Data  *[]Item `json:"data,omitempty"`
	Links *Links  `json:"links,omitempty"`
}

// Status defines model for status.
type Status struct {
	// Id External execution ID
	Id *string `json:"id,omitempty"`

	// Skipped Whether this node was skipped due to predicates not matching.
	Skipped *bool `json:"skipped,omitempty"`

	// Status External status of the job
	Status *string `json:"status,omitempty"`
	Stderr *string `json:"stderr,omitempty"`
	Stdout *string `json:"stdout,omitempty"`
}

// PutApiV0QueueIdJSONRequestBody defines body for PutApiV0QueueId for application/json ContentType.
type PutApiV0QueueIdJSONRequestBody = ExecutionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Amplify Home
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// Amplify V0 API Home
	// (GET /api/v0)
	GetApiV0(w http.ResponseWriter, r *http.Request)
	// Get Amplify work graph
	// (GET /api/v0/graph)
	GetApiV0Graph(w http.ResponseWriter, r *http.Request)
	// List all Amplify jobs
	// (GET /api/v0/jobs)
	GetApiV0Jobs(w http.ResponseWriter, r *http.Request)
	// Get a job by id
	// (GET /api/v0/jobs/{id})
	GetApiV0JobsId(w http.ResponseWriter, r *http.Request, id string)
	// Amplify work queue
	// (GET /api/v0/queue)
	GetApiV0Queue(w http.ResponseWriter, r *http.Request)
	// Get an item from the queue by id
	// (GET /api/v0/queue/{id})
	GetApiV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Run all workflows for a CID
	// (PUT /api/v0/queue/{id})
	PutApiV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0 operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0Graph operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0Graph(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0Graph(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0Jobs operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0Jobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0Jobs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0JobsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0JobsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0JobsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0Queue operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0Queue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutApiV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/", wrapper.Get).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0", wrapper.GetApiV0).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/graph", wrapper.GetApiV0Graph).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/jobs", wrapper.GetApiV0Jobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/jobs/{id}", wrapper.GetApiV0JobsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/queue", wrapper.GetApiV0Queue).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/queue/{id}", wrapper.GetApiV0QueueId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/queue/{id}", wrapper.PutApiV0QueueId).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LPAMj/HyfPm/AAAA//81+xwYvx8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
