// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// ExecutionRequest defines model for ExecutionRequest.
type ExecutionRequest struct {
	Cid string `json:"cid"`
}

// GraphCollection defines model for GraphCollection.
type GraphCollection struct {
	Data []NodeSpec `json:"data"`

	// Jsonapi An object describing the server's implementation
	Jsonapi *Jsonapi `json:"jsonapi,omitempty"`

	// Links Link members related to the primary data.
	Links *PaginationLinks `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`
}

// GraphCollectionData defines model for GraphCollectionData.
type GraphCollectionData = []NodeSpec

// ItemResult defines model for ItemResult.
type ItemResult struct {
	// Id External execution ID
	Id *string `json:"id,omitempty"`

	// Skipped Whether this node was skipped due to predicates not matching.
	Skipped *bool   `json:"skipped,omitempty"`
	Stderr  *string `json:"stderr,omitempty"`
	Stdout  *string `json:"stdout,omitempty"`
}

// JobCollection defines model for JobCollection.
type JobCollection struct {
	Data []JobSpec `json:"data"`

	// Jsonapi An object describing the server's implementation
	Jsonapi *Jsonapi `json:"jsonapi,omitempty"`

	// Links Link members related to the primary data.
	Links *PaginationLinks `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`
}

// JobCollectionData defines model for JobCollectionData.
type JobCollectionData = []JobSpec

// JobDatum singular item
type JobDatum struct {
	Data *JobSpec `json:"data,omitempty"`
}

// JobSpec defines model for JobSpec.
type JobSpec struct {
	// Attributes Node attributes
	Attributes *JobSpecAttributes `json:"attributes,omitempty"`

	// Id [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
	Id    string           `json:"id"`
	Links *map[string]Link `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`

	// Relationships Members of the relationships object represent references from the resource object in which it's defined to other resource objects. N.B. this is validation, not useful for inclusion.
	Relationships *map[string]Relationship `json:"relationships,omitempty"`

	// Type [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
	Type string `json:"type"`
}

// JobSpecAttributes Node attributes
type JobSpecAttributes struct {
	Entrypoint []string `json:"entrypoint"`
	Image      string   `json:"image"`
}

// Node Node resource.
type Node struct {
	Attributes *NodeAttributes `json:"attributes,omitempty"`

	// Id [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
	Id    string           `json:"id"`
	Links *map[string]Link `json:"links,omitempty"`
	Meta  *QueueMetadata   `json:"meta,omitempty"`

	// Relationships Members of the relationships object represent references from the resource object in which it's defined to other resource objects. N.B. this is validation, not useful for inclusion.
	Relationships *map[string]Relationship `json:"relationships,omitempty"`

	// Type [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
	Type string `json:"type"`
}

// NodeAttributes defines model for NodeAttributes.
type NodeAttributes struct {
	Children *[]Node             `json:"children,omitempty"`
	Inputs   []ExecutionRequest  `json:"inputs"`
	Outputs  *[]ExecutionRequest `json:"outputs,omitempty"`
	Result   *ItemResult         `json:"result,omitempty"`
}

// NodeInput defines model for NodeInput.
type NodeInput struct {
	NodeId    string `json:"node_id"`
	OutputId  string `json:"output_id"`
	Path      string `json:"path"`
	Predicate string `json:"predicate"`
	Root      bool   `json:"root"`
}

// NodeOutput defines model for NodeOutput.
type NodeOutput struct {
	Id   string `json:"id"`
	Path string `json:"path"`
}

// NodeSpec defines model for NodeSpec.
type NodeSpec struct {
	// Attributes Node attributes
	Attributes *NodeSpecAttributes `json:"attributes,omitempty"`

	// Id [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
	Id    string           `json:"id"`
	Links *map[string]Link `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`

	// Relationships Members of the relationships object represent references from the resource object in which it's defined to other resource objects. N.B. this is validation, not useful for inclusion.
	Relationships *map[string]Relationship `json:"relationships,omitempty"`

	// Type [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
	Type string `json:"type"`
}

// NodeSpecAttributes Node attributes
type NodeSpecAttributes struct {
	Inputs  []NodeInput   `json:"inputs"`
	JobId   string        `json:"job_id"`
	Outputs *[]NodeOutput `json:"outputs,omitempty"`
}

// PaginationLinks defines model for PaginationLinks.
type PaginationLinks struct {
	// First The first page of data
	First *string `json:"first,omitempty"`

	// Last The last page of data
	Last *string `json:"last,omitempty"`

	// Next The next page of data
	Next *string `json:"next,omitempty"`

	// Prev The previous page of data
	Prev                 *string         `json:"prev,omitempty"`
	AdditionalProperties map[string]Link `json:"-"`
}

// QueueCollection defines model for QueueCollection.
type QueueCollection struct {
	Data []QueueItem `json:"data"`

	// Jsonapi An object describing the server's implementation
	Jsonapi *Jsonapi `json:"jsonapi,omitempty"`

	// Links Link members related to the primary data.
	Links *PaginationLinks `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`
}

// QueueCollectionData defines model for QueueCollectionData.
type QueueCollectionData = []QueueItem

// QueueDatum singular item
type QueueDatum struct {
	// Data Node resource.
	Data *QueueItemDetail `json:"data,omitempty"`
}

// QueueItem QueueItem
type QueueItem struct {
	// Attributes Members of the attributes object (`attributes`) represent information about the resource object in which it's defined.
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// Id [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
	Id    string           `json:"id"`
	Links *map[string]Link `json:"links,omitempty"`
	Meta  *QueueMetadata   `json:"meta,omitempty"`

	// Relationships Members of the relationships object represent references from the resource object in which it's defined to other resource objects. N.B. this is validation, not useful for inclusion.
	Relationships *map[string]Relationship `json:"relationships,omitempty"`

	// Type [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
	Type string `json:"type"`
}

// QueueItemAttributes Node attributes
type QueueItemAttributes struct {
	Graph   *[]Node             `json:"graph,omitempty"`
	Inputs  []ExecutionRequest  `json:"inputs"`
	Outputs *[]ExecutionRequest `json:"outputs,omitempty"`
}

// QueueItemDetail Node resource.
type QueueItemDetail struct {
	// Attributes Node attributes
	Attributes *QueueItemAttributes `json:"attributes,omitempty"`

	// Id [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
	Id    string           `json:"id"`
	Links *map[string]Link `json:"links,omitempty"`
	Meta  *QueueMetadata   `json:"meta,omitempty"`

	// Relationships Members of the relationships object represent references from the resource object in which it's defined to other resource objects. N.B. this is validation, not useful for inclusion.
	Relationships *map[string]Relationship `json:"relationships,omitempty"`

	// Type [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
	Type string `json:"type"`
}

// QueueMetadata defines model for QueueMetadata.
type QueueMetadata struct {
	Ended     *string `json:"ended,omitempty"`
	Started   *string `json:"started,omitempty"`
	Status    string  `json:"status"`
	Submitted string  `json:"submitted"`
}

// QueuePostDatum defines model for QueuePostDatum.
type QueuePostDatum struct {
	Cid string `json:"cid"`
}

// QueuePutAttributes defines model for QueuePutAttributes.
type QueuePutAttributes struct {
	Inputs []ExecutionRequest `json:"inputs"`
}

// QueuePutDatum singular item being [created](https://jsonapi.org/format/#crud-creating). `id` is optional and may be ignored if supplied and created by the system.
type QueuePutDatum struct {
	Data QueuePutResource `json:"data"`
}

// QueuePutResource defines model for QueuePutResource.
type QueuePutResource struct {
	Attributes QueuePutAttributes `json:"attributes"`
}

// ResultCollection defines model for ResultCollection.
type ResultCollection struct {
	Data []ResultDatum `json:"data"`

	// Jsonapi An object describing the server's implementation
	Jsonapi *Jsonapi `json:"jsonapi,omitempty"`

	// Links Link members related to the primary data.
	Links *PaginationLinks `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`
}

// ResultCollectionData defines model for ResultCollectionData.
type ResultCollectionData = []ResultDatum

// ResultDatum defines model for ResultDatum.
type ResultDatum struct {
	// Attributes Members of the attributes object (`attributes`) represent information about the resource object in which it's defined.
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// Id [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
	Id    string           `json:"id"`
	Links *map[string]Link `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`

	// Relationships Members of the relationships object represent references from the resource object in which it's defined to other resource objects. N.B. this is validation, not useful for inclusion.
	Relationships *map[string]Relationship `json:"relationships,omitempty"`

	// Type [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
	Type string `json:"type"`
}

// Attributes Members of the attributes object (`attributes`) represent information about the resource object in which it's defined.
type Attributes = map[string]interface{}

// Datum singular item
type Datum struct {
	// Data Resource objects appear in a JSON API document to represent resources.
	Data *Resource `json:"data,omitempty"`
}

// Empty OAS doesn't allow the null type so use this.
type Empty = Nulltype

// Error defines model for error.
type Error struct {
	// Code An application-specific error code, expressed as a string value.
	Code *string `json:"code,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Id A unique identifier for this particular occurrence of the problem.
	Id    *string          `json:"id,omitempty"`
	Links *map[string]Link `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta   *map[string]interface{} `json:"meta,omitempty"`
	Source *ErrorSource            `json:"source,omitempty"`

	// Status The HTTP status code applicable to this problem, expressed as a string value.
	Status *string `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// ErrorSource defines model for error_source.
type ErrorSource struct {
	// Parameter A string indicating which query parameter caused the error.
	Parameter *string `json:"parameter,omitempty"`

	// Pointer A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute].
	Pointer *string `json:"pointer,omitempty"`
}

// Failure defines model for failure.
type Failure struct {
	Errors []Error `json:"errors"`

	// Jsonapi An object describing the server's implementation
	Jsonapi *Jsonapi         `json:"jsonapi,omitempty"`
	Links   *map[string]Link `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`
}

// Id [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
type Id = string

// Info defines model for info.
type Info struct {
	// Jsonapi An object describing the server's implementation
	Jsonapi *Jsonapi         `json:"jsonapi,omitempty"`
	Links   *map[string]Link `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta map[string]interface{} `json:"meta"`
}

// Jsonapi An object describing the server's implementation
type Jsonapi struct {
	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta    *map[string]interface{} `json:"meta,omitempty"`
	Version *string                 `json:"version,omitempty"`
}

// Link A string containing the link's URL.
type Link = string

// Linkage The `type` and `id` to non-empty members.
type Linkage struct {
	Id string `json:"id"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`
	Type string                  `json:"type"`
}

// Links defines model for links.
type Links map[string]Link

// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
type Meta map[string]interface{}

// Nulltype OAS doesn't allow the null type so use this.
type Nulltype = map[string]interface{}

// Pagination defines model for pagination.
type Pagination struct {
	// First The first page of data
	First *string `json:"first,omitempty"`

	// Last The last page of data
	Last *string `json:"last,omitempty"`

	// Next The next page of data
	Next *string `json:"next,omitempty"`

	// Prev The previous page of data
	Prev *string `json:"prev,omitempty"`
}

// Relationship A single relationship description
type Relationship struct {
	// Data Member, whose value represents `resource linkage`.
	Data *Relationship_Data `json:"data,omitempty"`

	// Links A resource object **MAY** contain references to other resource objects (`relationships`). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource's links object.
	Links *RelationshipLinks `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta  *map[string]interface{} `json:"meta,omitempty"`
	union json.RawMessage
}

// Relationship_Data Member, whose value represents `resource linkage`.
type Relationship_Data struct {
	union json.RawMessage
}

// Relationship0 defines model for .
type Relationship0 = interface{}

// Relationship1 defines model for .
type Relationship1 = interface{}

// Relationship2 defines model for .
type Relationship2 = interface{}

// RelationshipLinks A resource object **MAY** contain references to other resource objects (`relationships`). Relationships may be to-one or to-many. Relationships can be specified by including a member in a resource's links object.
type RelationshipLinks struct {
	// Related A string containing the link's URL.
	Related *string `json:"related,omitempty"`

	// Self A string containing the link's URL.
	Self                 *string                `json:"self,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RelationshipToMany An array of objects each containing `type` and `id` members for to-many relationships.
type RelationshipToMany = []Linkage

// RelationshipToOne References to other resource objects in a to-one (`relationship`). Relationships can be specified by including a member in a resource's links object.
type RelationshipToOne struct {
	union json.RawMessage
}

// Relationships Members of the relationships object represent references from the resource object in which it's defined to other resource objects. N.B. this is validation, not useful for inclusion.
type Relationships map[string]Relationship

// Resource Resource objects appear in a JSON API document to represent resources.
type Resource struct {
	// Attributes Members of the attributes object (`attributes`) represent information about the resource object in which it's defined.
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// Id [resource object identifier](https://jsonapi.org/format/#document-resource-object-identification)
	Id    string           `json:"id"`
	Links *map[string]Link `json:"links,omitempty"`

	// Meta Non-standard meta-information that can not be represented as an attribute or relationship.
	Meta *map[string]interface{} `json:"meta,omitempty"`

	// Relationships Members of the relationships object represent references from the resource object in which it's defined to other resource objects. N.B. this is validation, not useful for inclusion.
	Relationships *map[string]Relationship `json:"relationships,omitempty"`

	// Type [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
	Type string `json:"type"`
}

// Type [resource object type](https://jsonapi.org/format/#document-resource-object-identification)
type Type = string

// PageNumber defines model for pageNumber.
type PageNumber = int32

// PageSize defines model for pageSize.
type PageSize = int32

// Sort defines model for sort.
type Sort = string

// GetV0AnalyticsResultsResultMetadataKeyParams defines parameters for GetV0AnalyticsResultsResultMetadataKey.
type GetV0AnalyticsResultsResultMetadataKeyParams struct {
	// Sort [fields to sort by](https://jsonapi.org/format/#fetching-sorting)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// PageSize size of page for paginated results
	PageSize *int32 `form:"page[size],omitempty" json:"page[size],omitempty"`

	// PageNumber page number of results
	PageNumber *int32 `form:"page[number],omitempty" json:"page[number],omitempty"`
}

// GetV0GraphParams defines parameters for GetV0Graph.
type GetV0GraphParams struct {
	// PageSize size of page for paginated results
	PageSize *int32 `form:"page[size],omitempty" json:"page[size],omitempty"`

	// PageNumber page number of results
	PageNumber *int32 `form:"page[number],omitempty" json:"page[number],omitempty"`
}

// GetV0JobsParams defines parameters for GetV0Jobs.
type GetV0JobsParams struct {
	// PageSize size of page for paginated results
	PageSize *int32 `form:"page[size],omitempty" json:"page[size],omitempty"`

	// PageNumber page number of results
	PageNumber *int32 `form:"page[number],omitempty" json:"page[number],omitempty"`
}

// GetV0QueueParams defines parameters for GetV0Queue.
type GetV0QueueParams struct {
	// Sort [fields to sort by](https://jsonapi.org/format/#fetching-sorting)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// PageSize size of page for paginated results
	PageSize *int32 `form:"page[size],omitempty" json:"page[size],omitempty"`

	// PageNumber page number of results
	PageNumber *int32 `form:"page[number],omitempty" json:"page[number],omitempty"`
}

// PostV0QueueFormdataRequestBody defines body for PostV0Queue for application/x-www-form-urlencoded ContentType.
type PostV0QueueFormdataRequestBody = QueuePostDatum

// PutV0QueueIdJSONRequestBody defines body for PutV0QueueId for application/json ContentType.
type PutV0QueueIdJSONRequestBody = QueuePutDatum

// Getter for additional properties for PaginationLinks. Returns the specified
// element and whether it was found
func (a PaginationLinks) Get(fieldName string) (value Link, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PaginationLinks
func (a *PaginationLinks) Set(fieldName string, value Link) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Link)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PaginationLinks to handle AdditionalProperties
func (a *PaginationLinks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["first"]; found {
		err = json.Unmarshal(raw, &a.First)
		if err != nil {
			return fmt.Errorf("error reading 'first': %w", err)
		}
		delete(object, "first")
	}

	if raw, found := object["last"]; found {
		err = json.Unmarshal(raw, &a.Last)
		if err != nil {
			return fmt.Errorf("error reading 'last': %w", err)
		}
		delete(object, "last")
	}

	if raw, found := object["next"]; found {
		err = json.Unmarshal(raw, &a.Next)
		if err != nil {
			return fmt.Errorf("error reading 'next': %w", err)
		}
		delete(object, "next")
	}

	if raw, found := object["prev"]; found {
		err = json.Unmarshal(raw, &a.Prev)
		if err != nil {
			return fmt.Errorf("error reading 'prev': %w", err)
		}
		delete(object, "prev")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Link)
		for fieldName, fieldBuf := range object {
			var fieldVal Link
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PaginationLinks to handle AdditionalProperties
func (a PaginationLinks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.First != nil {
		object["first"], err = json.Marshal(a.First)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'first': %w", err)
		}
	}

	if a.Last != nil {
		object["last"], err = json.Marshal(a.Last)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last': %w", err)
		}
	}

	if a.Next != nil {
		object["next"], err = json.Marshal(a.Next)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'next': %w", err)
		}
	}

	if a.Prev != nil {
		object["prev"], err = json.Marshal(a.Prev)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'prev': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RelationshipLinks. Returns the specified
// element and whether it was found
func (a RelationshipLinks) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RelationshipLinks
func (a *RelationshipLinks) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RelationshipLinks to handle AdditionalProperties
func (a *RelationshipLinks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["related"]; found {
		err = json.Unmarshal(raw, &a.Related)
		if err != nil {
			return fmt.Errorf("error reading 'related': %w", err)
		}
		delete(object, "related")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RelationshipLinks to handle AdditionalProperties
func (a RelationshipLinks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Related != nil {
		object["related"], err = json.Marshal(a.Related)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'related': %w", err)
		}
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsRelationship0 returns the union data inside the Relationship as a Relationship0
func (t Relationship) AsRelationship0() (Relationship0, error) {
	var body Relationship0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelationship0 overwrites any union data inside the Relationship as the provided Relationship0
func (t *Relationship) FromRelationship0(v Relationship0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelationship0 performs a merge with any union data inside the Relationship, using the provided Relationship0
func (t *Relationship) MergeRelationship0(v Relationship0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsRelationship1 returns the union data inside the Relationship as a Relationship1
func (t Relationship) AsRelationship1() (Relationship1, error) {
	var body Relationship1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelationship1 overwrites any union data inside the Relationship as the provided Relationship1
func (t *Relationship) FromRelationship1(v Relationship1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelationship1 performs a merge with any union data inside the Relationship, using the provided Relationship1
func (t *Relationship) MergeRelationship1(v Relationship1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsRelationship2 returns the union data inside the Relationship as a Relationship2
func (t Relationship) AsRelationship2() (Relationship2, error) {
	var body Relationship2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelationship2 overwrites any union data inside the Relationship as the provided Relationship2
func (t *Relationship) FromRelationship2(v Relationship2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelationship2 performs a merge with any union data inside the Relationship, using the provided Relationship2
func (t *Relationship) MergeRelationship2(v Relationship2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Relationship) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Data != nil {
		object["data"], err = json.Marshal(t.Data)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'data': %w", err)
		}
	}

	if t.Links != nil {
		object["links"], err = json.Marshal(t.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if t.Meta != nil {
		object["meta"], err = json.Marshal(t.Meta)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'meta': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *Relationship) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["data"]; found {
		err = json.Unmarshal(raw, &t.Data)
		if err != nil {
			return fmt.Errorf("error reading 'data': %w", err)
		}
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &t.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
	}

	if raw, found := object["meta"]; found {
		err = json.Unmarshal(raw, &t.Meta)
		if err != nil {
			return fmt.Errorf("error reading 'meta': %w", err)
		}
	}

	return err
}

// AsRelationshipToOne returns the union data inside the Relationship_Data as a RelationshipToOne
func (t Relationship_Data) AsRelationshipToOne() (RelationshipToOne, error) {
	var body RelationshipToOne
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelationshipToOne overwrites any union data inside the Relationship_Data as the provided RelationshipToOne
func (t *Relationship_Data) FromRelationshipToOne(v RelationshipToOne) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelationshipToOne performs a merge with any union data inside the Relationship_Data, using the provided RelationshipToOne
func (t *Relationship_Data) MergeRelationshipToOne(v RelationshipToOne) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsRelationshipToMany returns the union data inside the Relationship_Data as a RelationshipToMany
func (t Relationship_Data) AsRelationshipToMany() (RelationshipToMany, error) {
	var body RelationshipToMany
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRelationshipToMany overwrites any union data inside the Relationship_Data as the provided RelationshipToMany
func (t *Relationship_Data) FromRelationshipToMany(v RelationshipToMany) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRelationshipToMany performs a merge with any union data inside the Relationship_Data, using the provided RelationshipToMany
func (t *Relationship_Data) MergeRelationshipToMany(v RelationshipToMany) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t Relationship_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Relationship_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEmpty returns the union data inside the RelationshipToOne as a Empty
func (t RelationshipToOne) AsEmpty() (Empty, error) {
	var body Empty
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmpty overwrites any union data inside the RelationshipToOne as the provided Empty
func (t *RelationshipToOne) FromEmpty(v Empty) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmpty performs a merge with any union data inside the RelationshipToOne, using the provided Empty
func (t *RelationshipToOne) MergeEmpty(v Empty) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsLinkage returns the union data inside the RelationshipToOne as a Linkage
func (t RelationshipToOne) AsLinkage() (Linkage, error) {
	var body Linkage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkage overwrites any union data inside the RelationshipToOne as the provided Linkage
func (t *RelationshipToOne) FromLinkage(v Linkage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkage performs a merge with any union data inside the RelationshipToOne, using the provided Linkage
func (t *RelationshipToOne) MergeLinkage(v Linkage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t RelationshipToOne) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RelationshipToOne) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Amplify home
	// (GET /v0)
	GetV0(w http.ResponseWriter, r *http.Request)

	// (GET /v0/analytics/results/{result_metadata_key})
	GetV0AnalyticsResultsResultMetadataKey(w http.ResponseWriter, r *http.Request, resultMetadataKey string, params GetV0AnalyticsResultsResultMetadataKeyParams)
	// Amplify graph
	// (GET /v0/graph)
	GetV0Graph(w http.ResponseWriter, r *http.Request, params GetV0GraphParams)
	// Amplify jobs
	// (GET /v0/jobs)
	GetV0Jobs(w http.ResponseWriter, r *http.Request, params GetV0JobsParams)
	// Get a job by id
	// (GET /v0/jobs/{id})
	GetV0JobsId(w http.ResponseWriter, r *http.Request, id string)
	// Amplify work queue
	// (GET /v0/queue)
	GetV0Queue(w http.ResponseWriter, r *http.Request, params GetV0QueueParams)
	// Run all workflows for a CID (not recommended)
	// (POST /v0/queue)
	PostV0Queue(w http.ResponseWriter, r *http.Request)
	// Get an item from the queue by id
	// (GET /v0/queue/{id})
	GetV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)

	// (PUT /v0/queue/{id})
	PutV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetV0 operation middleware
func (siw *ServerInterfaceWrapper) GetV0(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0AnalyticsResultsResultMetadataKey operation middleware
func (siw *ServerInterfaceWrapper) GetV0AnalyticsResultsResultMetadataKey(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "result_metadata_key" -------------
	var resultMetadataKey string

	err = runtime.BindStyledParameter("simple", false, "result_metadata_key", mux.Vars(r)["result_metadata_key"], &resultMetadataKey)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "result_metadata_key", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV0AnalyticsResultsResultMetadataKeyParams

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[size]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", r.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[number]", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0AnalyticsResultsResultMetadataKey(w, r, resultMetadataKey, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Graph operation middleware
func (siw *ServerInterfaceWrapper) GetV0Graph(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV0GraphParams

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[size]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", r.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[number]", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Graph(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Jobs operation middleware
func (siw *ServerInterfaceWrapper) GetV0Jobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV0JobsParams

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[size]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", r.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[number]", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Jobs(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0JobsId operation middleware
func (siw *ServerInterfaceWrapper) GetV0JobsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0JobsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Queue operation middleware
func (siw *ServerInterfaceWrapper) GetV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV0QueueParams

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	// ------------- Optional query parameter "page[size]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[size]", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[size]", Err: err})
		return
	}

	// ------------- Optional query parameter "page[number]" -------------

	err = runtime.BindQueryParameter("form", true, false, "page[number]", r.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page[number]", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Queue(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostV0Queue operation middleware
func (siw *ServerInterfaceWrapper) PostV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV0Queue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) GetV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) PutV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/v0", wrapper.GetV0).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/analytics/results/{result_metadata_key}", wrapper.GetV0AnalyticsResultsResultMetadataKey).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/graph", wrapper.GetV0Graph).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs", wrapper.GetV0Jobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs/{id}", wrapper.GetV0JobsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue", wrapper.GetV0Queue).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue", wrapper.PostV0Queue).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.GetV0QueueId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.PutV0QueueId).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"B8cvMnAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
