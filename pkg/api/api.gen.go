// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Error defines model for error.
type Error struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// Errors defines model for errors.
type Errors = []Error

// ExecutionRequest defines model for executionRequest.
type ExecutionRequest struct {
	Cid string `json:"cid"`
}

// Graph defines model for graph.
type Graph struct {
	Data  *[]NodeConfig `json:"data,omitempty"`
	Links *Links        `json:"links,omitempty"`
}

// Home defines model for home.
type Home struct {
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Item defines model for item.
type Item struct {
	Id       string       `json:"id"`
	Links    *Links       `json:"links,omitempty"`
	Metadata ItemMetadata `json:"metadata"`
	Type     string       `json:"type"`
}

// ItemMetadata defines model for itemMetadata.
type ItemMetadata struct {
	Ended     *string `json:"ended,omitempty"`
	Started   *string `json:"started,omitempty"`
	Status    string  `json:"status"`
	Submitted string  `json:"submitted"`
}

// ItemResult defines model for itemResult.
type ItemResult struct {
	// Id External execution ID
	Id *string `json:"id,omitempty"`

	// Skipped Whether this node was skipped due to predicates not matching.
	Skipped *bool   `json:"skipped,omitempty"`
	Stderr  *string `json:"stderr,omitempty"`
	Stdout  *string `json:"stdout,omitempty"`
}

// Job defines model for job.
type Job struct {
	Entrypoint *[]string `json:"entrypoint,omitempty"`
	Id         string    `json:"id"`
	Image      string    `json:"image"`
	Links      *Links    `json:"links,omitempty"`
	Type       string    `json:"type"`
}

// Jobs defines model for jobs.
type Jobs struct {
	Data  *[]Job `json:"data,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// Links defines model for links.
type Links = map[string]interface{}

// Node defines model for node.
type Node struct {
	Children *[]Node            `json:"children,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Inputs   []ExecutionRequest `json:"inputs"`
	Links    *Links             `json:"links,omitempty"`
	Metadata ItemMetadata       `json:"metadata"`
	Name     *string            `json:"name,omitempty"`
	Outputs  []ExecutionRequest `json:"outputs"`
	Result   *ItemResult        `json:"result,omitempty"`
	Type     string             `json:"type"`
}

// NodeConfig Static configuration of a node.
type NodeConfig struct {
	Id      *string       `json:"id,omitempty"`
	Inputs  *[]NodeInput  `json:"inputs,omitempty"`
	JobId   *string       `json:"job_id,omitempty"`
	Outputs *[]NodeOutput `json:"outputs,omitempty"`
}

// NodeInput Input specification for a node.
type NodeInput struct {
	OutputId  *string `json:"output_id,omitempty"`
	Path      *string `json:"path,omitempty"`
	Predicate *string `json:"predicate,omitempty"`
	Root      *bool   `json:"root,omitempty"`
	StepId    *string `json:"step_id,omitempty"`
}

// NodeOutput Output specification for a node.
type NodeOutput struct {
	Id   *string `json:"id,omitempty"`
	Path *string `json:"path,omitempty"`
}

// PageMeta defines model for pageMeta.
type PageMeta struct {
	// TotalPages Total number of pages in paginated result.
	TotalPages *int `json:"totalPages,omitempty"`
}

// Queue defines model for queue.
type Queue struct {
	Data  *[]Item   `json:"data,omitempty"`
	Links *Links    `json:"links,omitempty"`
	Meta  *PageMeta `json:"meta,omitempty"`
}

// GetV0QueueParams defines parameters for GetV0Queue.
type GetV0QueueParams struct {
	// CreatedBefore Filter for items created before this date-time
	CreatedBefore *time.Time `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// CreatedAfter Filter for items created after this date-time
	CreatedAfter *time.Time `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostV0QueueFormdataRequestBody defines body for PostV0Queue for application/x-www-form-urlencoded ContentType.
type PostV0QueueFormdataRequestBody = ExecutionRequest

// PutV0QueueIdJSONRequestBody defines body for PutV0QueueId for application/json ContentType.
type PutV0QueueIdJSONRequestBody = ExecutionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Amplify V0 API Home
	// (GET /v0)
	GetV0(w http.ResponseWriter, r *http.Request)
	// Get Amplify work graph
	// (GET /v0/graph)
	GetV0Graph(w http.ResponseWriter, r *http.Request)
	// List all Amplify jobs
	// (GET /v0/jobs)
	GetV0Jobs(w http.ResponseWriter, r *http.Request)
	// Get a job by id
	// (GET /v0/jobs/{id})
	GetV0JobsId(w http.ResponseWriter, r *http.Request, id string)
	// Amplify work queue
	// (GET /v0/queue)
	GetV0Queue(w http.ResponseWriter, r *http.Request, params GetV0QueueParams)
	// Run all workflows for a CID (not recommended)
	// (POST /v0/queue)
	PostV0Queue(w http.ResponseWriter, r *http.Request)
	// Get an item from the queue by id
	// (GET /v0/queue/{id})
	GetV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Run all workflows for a CID
	// (PUT /v0/queue/{id})
	PutV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetV0 operation middleware
func (siw *ServerInterfaceWrapper) GetV0(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Graph operation middleware
func (siw *ServerInterfaceWrapper) GetV0Graph(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Graph(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Jobs operation middleware
func (siw *ServerInterfaceWrapper) GetV0Jobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Jobs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0JobsId operation middleware
func (siw *ServerInterfaceWrapper) GetV0JobsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0JobsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0Queue operation middleware
func (siw *ServerInterfaceWrapper) GetV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV0QueueParams

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", r.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "createdBefore", Err: err})
		return
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", r.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "createdAfter", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0Queue(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostV0Queue operation middleware
func (siw *ServerInterfaceWrapper) PostV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV0Queue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) GetV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) PutV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/v0", wrapper.GetV0).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/graph", wrapper.GetV0Graph).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs", wrapper.GetV0Jobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/jobs/{id}", wrapper.GetV0JobsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue", wrapper.GetV0Queue).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue", wrapper.PostV0Queue).Methods("POST")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.GetV0QueueId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/v0/queue/{id}", wrapper.PutV0QueueId).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+d8AAAD//8rvYQyBIwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
