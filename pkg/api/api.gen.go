// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// Error defines model for error.
type Error struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// Errors defines model for errors.
type Errors = []Error

// ExecutionRequest defines model for executionRequest.
type ExecutionRequest struct {
	Cid string `json:"cid"`
}

// Graph defines model for graph.
type Graph struct {
	Data  *[]NodeConfig `json:"data,omitempty"`
	Links *Links        `json:"links,omitempty"`
}

// Home defines model for home.
type Home struct {
	Links *Links  `json:"links,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Item defines model for item.
type Item struct {
	Id       string       `json:"id"`
	Links    *Links       `json:"links,omitempty"`
	Metadata ItemMetadata `json:"metadata"`
	Type     string       `json:"type"`
}

// ItemMetadata defines model for itemMetadata.
type ItemMetadata struct {
	Ended     *string `json:"ended,omitempty"`
	Started   *string `json:"started,omitempty"`
	Status    string  `json:"status"`
	Submitted string  `json:"submitted"`
}

// ItemResult defines model for itemResult.
type ItemResult struct {
	// Id External execution ID
	Id *string `json:"id,omitempty"`

	// Skipped Whether this node was skipped due to predicates not matching.
	Skipped *bool   `json:"skipped,omitempty"`
	Stderr  *string `json:"stderr,omitempty"`
	Stdout  *string `json:"stdout,omitempty"`
}

// Job defines model for job.
type Job struct {
	Entrypoint *[]string `json:"entrypoint,omitempty"`
	Id         string    `json:"id"`
	Image      string    `json:"image"`
	Links      *Links    `json:"links,omitempty"`
	Type       string    `json:"type"`
}

// Jobs defines model for jobs.
type Jobs struct {
	Data  *[]Job `json:"data,omitempty"`
	Links *Links `json:"links,omitempty"`
}

// Links defines model for links.
type Links = map[string]interface{}

// Node defines model for node.
type Node struct {
	Children *[]Node            `json:"children,omitempty"`
	Id       openapi_types.UUID `json:"id"`
	Inputs   []ExecutionRequest `json:"inputs"`
	Links    *Links             `json:"links,omitempty"`
	Metadata ItemMetadata       `json:"metadata"`
	Name     *string            `json:"name,omitempty"`
	Outputs  []ExecutionRequest `json:"outputs"`
	Result   *ItemResult        `json:"result,omitempty"`
	Type     string             `json:"type"`
}

// NodeConfig Static configuration of a node.
type NodeConfig struct {
	Id      *string       `json:"id,omitempty"`
	Inputs  *[]NodeInput  `json:"inputs,omitempty"`
	JobId   *string       `json:"job_id,omitempty"`
	Outputs *[]NodeOutput `json:"outputs,omitempty"`
}

// NodeInput Input specification for a node.
type NodeInput struct {
	OutputId  *string `json:"output_id,omitempty"`
	Path      *string `json:"path,omitempty"`
	Predicate *string `json:"predicate,omitempty"`
	Root      *bool   `json:"root,omitempty"`
	StepId    *string `json:"step_id,omitempty"`
}

// NodeOutput Output specification for a node.
type NodeOutput struct {
	Id   *string `json:"id,omitempty"`
	Path *string `json:"path,omitempty"`
}

// PageMeta defines model for pageMeta.
type PageMeta struct {
	// TotalPages Total number of pages in paginated result.
	TotalPages *int `json:"totalPages,omitempty"`
}

// Queue defines model for queue.
type Queue struct {
	Data  *[]Item   `json:"data,omitempty"`
	Links *Links    `json:"links,omitempty"`
	Meta  *PageMeta `json:"meta,omitempty"`
}

// GetApiV0QueueParams defines parameters for GetApiV0Queue.
type GetApiV0QueueParams struct {
	// CreatedBefore Filter for items created before this date-time
	CreatedBefore *time.Time `form:"createdBefore,omitempty" json:"createdBefore,omitempty"`

	// CreatedAfter Filter for items created after this date-time
	CreatedAfter *time.Time `form:"createdAfter,omitempty" json:"createdAfter,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostApiV0QueueFormdataRequestBody defines body for PostApiV0Queue for application/x-www-form-urlencoded ContentType.
type PostApiV0QueueFormdataRequestBody = ExecutionRequest

// PutApiV0QueueIdJSONRequestBody defines body for PutApiV0QueueId for application/json ContentType.
type PutApiV0QueueIdJSONRequestBody = ExecutionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Amplify Home
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// Amplify V0 API Home
	// (GET /api/v0)
	GetApiV0(w http.ResponseWriter, r *http.Request)
	// Get Amplify work graph
	// (GET /api/v0/graph)
	GetApiV0Graph(w http.ResponseWriter, r *http.Request)
	// List all Amplify jobs
	// (GET /api/v0/jobs)
	GetApiV0Jobs(w http.ResponseWriter, r *http.Request)
	// Get a job by id
	// (GET /api/v0/jobs/{id})
	GetApiV0JobsId(w http.ResponseWriter, r *http.Request, id string)
	// Amplify work queue
	// (GET /api/v0/queue)
	GetApiV0Queue(w http.ResponseWriter, r *http.Request, params GetApiV0QueueParams)
	// Run all workflows for a CID (not recommended)
	// (POST /api/v0/queue)
	PostApiV0Queue(w http.ResponseWriter, r *http.Request)
	// Get an item from the queue by id
	// (GET /api/v0/queue/{id})
	GetApiV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Run all workflows for a CID
	// (PUT /api/v0/queue/{id})
	PutApiV0QueueId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0 operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0Graph operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0Graph(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0Graph(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0Jobs operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0Jobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0Jobs(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0JobsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0JobsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0JobsId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0Queue operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV0QueueParams

	// ------------- Optional query parameter "createdBefore" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdBefore", r.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "createdBefore", Err: err})
		return
	}

	// ------------- Optional query parameter "createdAfter" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdAfter", r.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "createdAfter", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0Queue(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostApiV0Queue operation middleware
func (siw *ServerInterfaceWrapper) PostApiV0Queue(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV0Queue(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetApiV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutApiV0QueueId operation middleware
func (siw *ServerInterfaceWrapper) PutApiV0QueueId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV0QueueId(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/", wrapper.Get).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0", wrapper.GetApiV0).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/graph", wrapper.GetApiV0Graph).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/jobs", wrapper.GetApiV0Jobs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/jobs/{id}", wrapper.GetApiV0JobsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/queue", wrapper.GetApiV0Queue).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/queue", wrapper.PostApiV0Queue).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/v0/queue/{id}", wrapper.GetApiV0QueueId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v0/queue/{id}", wrapper.PutApiV0QueueId).Methods("PUT")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
