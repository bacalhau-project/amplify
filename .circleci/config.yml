version: 2.1
executors:
  linux-amd64:
    machine:
      image: ubuntu-2204:2022.07.1
      resource_class: xlarge
  linux-arm64:
    machine:
      image: ubuntu-2204:2022.07.1
      resource_class: arm.xlarge
  darwin-amd64:
    macos:
      xcode: 13.4.1
    resource_class: large
  windows-amd64:
    machine:
      image: windows-server-2022-gui:current
      resource_class: windows.xlarge
      shell: bash.exe

jobs:
  build:
    parallelism: 1
    environment:
      IPFS_VERSION: v0.12.2
      GOPROXY: https://proxy.golang.org
      GOOS: << parameters.target_os >>
      GOARCH: << parameters.target_arch >>
      GOMAXPROCS: "2" # Avoid using all the allocated CPU, so tests don't get rate limited
    working_directory: ~/repo
    executor: << parameters.executor >>
    parameters:
      executor:
        type: enum
        enum: ["linux-amd64", "linux-arm64", "darwin-amd64", "windows-amd64"]
      target_arch:
        type: enum
        enum: ["amd64", "arm64", "armv6", "armv7"]
      target_os:
        type: enum
        enum: ["linux", "darwin", "windows"]
      run_tests:
        type: boolean
      build_tags:
        type: string
        default: ""
    steps:
      - checkout

      - when:
          condition:
            equal: ["windows", << parameters.target_os >>]
          steps:
            - run:
                name: Install GNU Make
                command: |
                  choco install -y make
                  choco install -y jq
                shell: powershell.exe

      - run:
          name: Set GOVER
          command: |
            go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.mod | cut -d' ' -f2)
            version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all" | \
              jq --arg v "$go_spec" --raw-output '[.[] | select(.stable) | select(.version | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber)) | reverse | .[0]')
            echo "Latest Go version for $go_spec is $version"
            echo "export GOVER=$version" >> $BASH_ENV

      - when:
          condition:
            equal: ["windows", << parameters.target_os >>]
          steps:
            - run:
                name: Install Go
                command: |
                  rm -rf /c/Program\ Files/Go
                  curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.<< parameters.executor >>.zip | tar --extract --gzip --file=- --directory=/c/Program\ Files

      - when:
          condition:
            or:
              - equal: ["darwin", << parameters.target_os >>]
              - equal: ["linux", << parameters.target_os >>]
          steps:
            - run:
                name: Install Go
                command: |
                  sudo rm -fr /usr/local/go /usr/local/bin/go
                  curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.<< parameters.executor >>.tar.gz | sudo tar --extract --gzip --file=- --directory=/usr/local
                  sudo ln -s /usr/local/go/bin/go /usr/local/bin/go

      - run:
          name: Set GOCACHE
          command: echo "export GOCACHE=$HOME/.cache/go-build" >> $BASH_ENV

      - run:
          name: Set GOPATH
          command: echo "export GOPATH=$HOME/go" >> $BASH_ENV

      - run:
          name: Init tools
          command: |
            make init
            go version
            which go

      # # # - run:
      # # #     name: Install Pre-commit
      # # #     command: |
      # # #       make install-pre-commit

      # # - run:
      # #     name: Cache Precommit
      # #     command: |
      # #       cp .pre-commit-config.yaml pre-commit-cache-key.txt
      # #       poetry run python --version --version >> pre-commit-cache-key.txt

      # - restore_cache:
      #     name: Restoring pre-commit cache
      #     key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}

      - restore_cache:
          name: Restoring Go cache
          key: go-mod-{{ arch }}-{{ checksum "go.sum" }}

      - run:
          name: Build
          command: make build-ci

      - when:
          condition:
            equal: [true, << parameters.run_tests >>]
          steps:
            - run:
                name: Test Go
                environment:
                  LOG_LEVEL: debug
                  TEST_BUILD_TAGS: << parameters.build_tags >>
                  TEST_PARALLEL_PACKAGES: 4 # This is set to 4 as xlarge instances have at least 8 CPUs, and we want to leave some CPU for the Docker instances
                command: |
                  export GOBIN=${HOME}/bin
                  export PATH=$GOBIN:$PATH
                  go install gotest.tools/gotestsum@v1.8.2
                  make test-and-report

                no_output_timeout: 20m
            - store_test_results:
                path: .
            - persist_to_workspace:
                root: coverage/
                paths:
                  - "*.coverage"

      - run:
          name: Build tarball
          command: |
            echo "$PRIVATE_PEM_B64" | base64 --decode > /tmp/private.pem
            echo "$PUBLIC_PEM_B64" | base64 --decode > /tmp/public.pem
            export PRIVATE_KEY_PASSPHRASE="$(echo $PRIVATE_KEY_PASSPHRASE_B64 | base64 --decode)"
            make build-amplify-tgz

      - when:
          condition:
            not:
              equal: ["integration", << parameters.build_tags >>]
          steps:
            - persist_to_workspace:
                root: dist/
                paths:
                  - "*.tar.gz"
                  - "*.sha256"

      - store_artifacts:
          path: dist/

      # - save_cache:
      #     name: Saving pre-commit cache
      #     key: v1-pc-cache-{{ checksum "pre-commit-cache-key.txt" }}
      #     paths:
      #       - ~/.cache/pre-commit

      - save_cache:
          name: Saving Go cache
          key: go-mod-{{ arch }}-{{ checksum "go.sum" }}
          paths:
            - ~/.cache/go-build
            - ~/go/pkg/mod

  coverage:
    executor: linux-amd64
    environment:
      GOPROXY: https://proxy.golang.org
    steps:
      - checkout

      - attach_workspace:
          at: coverage/

      - run:
          name: Set GOVER
          command: |
            go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.mod | cut -d' ' -f2)
            version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all" | \
              jq --arg v "$go_spec" --raw-output '[.[] | select(.stable) | select(.version | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber)) | reverse | .[0]')
            echo "Latest Go version for $go_spec is $version"
            echo "export GOVER=$version" >> $BASH_ENV

      - run:
          name: Install golang
          command: |
            sudo rm -fr /usr/local/go
            curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz | sudo tar --extract --gzip --file=- --directory=/usr/local
            go version
            which go

      - run:
          name: Install gocovmerge
          command: go install github.com/wadey/gocovmerge@latest
          
      - run:
          name: Install gotestsum
          command: go install gotest.tools/gotestsum@latest

      - run:
          name: Build coverage report
          command: make coverage-report

      - store_artifacts:
          path: coverage/coverage.html

  lint:
    parallelism: 1
    environment:
      GOLANGCILINT: v1.51.2
      GOPROXY: https://proxy.golang.org
    working_directory: ~/repo
    executor: linux-amd64
    steps:
      - checkout

      - run:
          name: Set GOVER
          command: |
            go_spec=$(grep 'go [[:digit:]].[[:digit:]]*' go.mod | cut -d' ' -f2)
            version=$(curl --silent --show-error --location --fail "https://go.dev/dl/?mode=json&include=all" | \
              jq --arg v "$go_spec" --raw-output '[.[] | select(.stable) | select(.version | startswith("go"+$v)) | .version | ltrimstr("go")] | sort_by(split(".") | map(tonumber)) | reverse | .[0]')
            echo "Latest Go version for $go_spec is $version"
            echo "export GOVER=$version" >> $BASH_ENV

      - run:
          name: Install golang
          command: |
            sudo rm -fr /usr/local/go
            curl --silent --show-error --location --fail https://go.dev/dl/go$GOVER.linux-amd64.tar.gz | sudo tar --extract --gzip --file=- --directory=/usr/local
            go version
            which go

      - run:
          name: Install golangci-lint
          command: |
            echo "Installing GOLANGCILINT: ${GOLANGCILINT}"
            # binary will be /usr/local/go/bin/bin/golangci-lint
            # For some reason, .circlerc (I don't know where this file is generated) reports `go env GOPATH` as '/home/circleci/.go_workspace:/usr/local/go_workspace' (with the colon)
            # This breaks normal pathing. So just installing in ./bin/
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | BINDIR=${HOME}/bin sh -s ${GOLANGCILINT}
            golangci-lint version

      - run:
          name: Run linter
          command: |
            make lint

      - run:
          name: Run go mod tidy check diff
          command: make modtidy check-diff
  release:
    executor: linux-amd64
    steps:
      - checkout
      - attach_workspace:
          at: dist/
      - run:
          name: Install gh
          command: |
            wget https://github.com/cli/cli/releases/download/v2.14.7/gh_2.14.7_linux_amd64.deb
            sudo dpkg -i gh_2.14.7_linux_amd64.deb
            echo "$AMPLIFY_RELEASE_TOKEN" | gh auth login --with-token
      - run:
          name: Uploading to Release - << pipeline.git.tag >>
          command: |
            TAG="<< pipeline.git.tag >>"
            echo "TAG = ${TAG}"
            find dist/
            gh release upload $TAG dist/*

  docker:
    executor: linux-amd64
    steps:
      - checkout
      - run:
          name: Login to GHCR
          command: |
            echo $GHCR_PAT | docker login ghcr.io -u circleci --password-stdin
      - run:
          name: Push application Docker image
          command: |
            docker context create buildx-build
            docker buildx create --use buildx-build
            make push-amplify-image

orbs:
  heroku: circleci/heroku@1.2.6

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  lint:
    jobs:
      - lint:
          name: Run linters and static checkers
          filters:
            tags:
              ignore: /.*/

  # These workflow will run on all branches except 'main' and will not run on tags
  test_linux_amd64:
    jobs:
      - build:
          name: test-<< matrix.target_os >>-<< matrix.target_arch >>-<< matrix.build_tags >>
          executor: << matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            parameters:
              target_os: [ "linux" ]
              target_arch: [ "amd64" ]
              run_tests: [ true ]
              build_tags: &build_tags ["unit"] # , "integration"
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/
      - coverage:
          name: Build coverage report
          requires:
            - build

  test_linux_arm64:
    jobs:
      - build:
          name: test-<< matrix.target_os >>-<< matrix.target_arch >>-<< matrix.build_tags >>
          executor: << matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            parameters:
              target_os: [ "linux" ]
              target_arch: [ "arm64" ]
              run_tests: [ true ]
              build_tags: *build_tags
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

  test_linux_armv6:
    jobs:
      - build:
          name: test-linux-armv6
          executor: linux-arm64
          target_os: linux
          target_arch: armv6
          run_tests: false
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

  test_linux_armv7:
    jobs:
      - build:
          name: test-linux-armv7
          executor: linux-arm64
          target_os: linux
          target_arch: armv7
          run_tests: false
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

  test_darwin_amd64:
    jobs:
      - build:
          name: test-<< matrix.target_os >>-<< matrix.target_arch >>-<< matrix.build_tags >>
          executor: << matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            parameters:
              target_os: [ "darwin" ]
              target_arch: [ "amd64" ]
              run_tests: [ true ]
              build_tags: *build_tags
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

  test_darwin_arm64:
    jobs:
      - build:
          name: test-darwin-arm64
          executor: darwin-amd64
          target_os: darwin
          target_arch: arm64
          run_tests: false
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

  test_windows_amd64:
    jobs:
      - build:
          name: test-<< matrix.target_os >>-<< matrix.target_arch >>-<< matrix.build_tags >>
          executor: << matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            parameters:
              target_os: [ "windows" ]
              target_arch: [ "amd64" ]
              run_tests: [ true ]
              build_tags: *build_tags
          filters:
            branches:
              ignore: main
            tags:
              ignore: /.*/

  main_only: # This workflow will only run on 'main' and will not run on tags
    jobs:
      - build:
          name: build-<< matrix.target_os >>-<< matrix.target_arch >>-<< matrix.build_tags >>
          executor: << matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            alias: build-generic
            parameters:
              target_os: ["linux", "darwin"]
              target_arch: ["amd64", "arm64"]
              run_tests: [true]
              build_tags: *build_tags
            exclude:
              - target_os: "darwin"
                target_arch: "arm64"
                run_tests: true
                build_tags: "unit"
              - target_os: "darwin"
                target_arch: "arm64"
                run_tests: true
                build_tags: "integration"
          filters:
            &filters_main_only # this yaml anchor is setting these values to "filters_main_only"
            branches:
              only: main
            tags:
              ignore: /.*/
      - build:
          name: build-darwin-arm64
          executor: darwin-amd64
          target_os: darwin
          target_arch: arm64
          run_tests: false
          filters: *filters_main_only
      - build:
          name: build-<< matrix.target_os >>-<< matrix.target_arch >>-<< matrix.build_tags >>
          executor: << matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            alias: build-windows
            parameters:
              target_os: ["windows"]
              target_arch: ["amd64"]
              run_tests: [true]
              build_tags: *build_tags
          filters: *filters_main_only
      - build:
          name: build-linux-<< matrix.target_arch >>
          executor: linux-arm64
          target_os: linux
          run_tests: false
          matrix:
            alias: build-arm
            parameters:
              target_arch: ["armv6", "armv7"]
          filters: *filters_main_only
      - coverage:
          name: Build coverage report
          requires:
            - build-generic
            - build-darwin-arm64
            - build-windows
            - build-arm

  tags_only: # This workflow will only run on tags (specifically starting with 'v.') and will not run on branches
    jobs:
      - build:
          name: build-<< matrix.target_os >>-<< matrix.target_arch >>
          executor: << matrix.target_os >>-<< matrix.target_arch >>
          matrix:
            alias: build-generic
            parameters:
              target_os: ["linux", "darwin", "windows"]
              target_arch: ["amd64", "arm64"]
              run_tests: [false]
            exclude:
              - target_os: windows
                target_arch: arm64
                run_tests: false
              - target_os: darwin
                target_arch: arm64
                run_tests: false
          filters: &filters_tags_only
            branches:
              ignore: /.*/ # don't run on any branches - only tags
            tags:
              # only run on tags that look like release tags e.g. v0.1.2,
              # NOT v0.1.3alpha19
              only: /^v([0-9]+).([0-9]+).([0-9]+)$/
      - build:
          name: build-darwin-arm64
          executor: darwin-amd64
          target_os: darwin
          target_arch: arm64
          run_tests: false
          filters: *filters_tags_only
      - build:
          name: build-linux-<< matrix.target_arch >>
          executor: linux-arm64
          target_os: linux
          run_tests: false
          matrix:
            alias: build-arm
            parameters:
              target_arch: ["armv6", "armv7"]
          filters: *filters_tags_only
      - release:
          name: release-all-binaries
          requires:
            - build-generic
            - build-darwin-arm64
            - build-arm
          filters: *filters_tags_only
      - docker:
          filters: *filters_tags_only
